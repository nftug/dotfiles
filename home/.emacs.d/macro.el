;;; macro.el -- My macro  -*- lexical-binding:t -*-
;;; Commentary:
;;; macro.el written by nftug
;;;
;;; This file is generated from init.org by org-babel.
;;;
;;; DO NOT EDIT THIS FILE!!
;;; If you want to edit this file, please edit from init.org.
;;; When you save the org file, both elisp and elc files are automatically generated.
;;;
;;; Code:
;;;

(defalias '! 'eval-when-compile)
(defalias '!! 'eval-and-compile)

(defmacro !if (test then &rest else)
  (declare (indent 2))
  (if (eval test) then `(progn ,@else)))

(defmacro with-suppressed-message (&rest body)
  "Suppress new messages temporarily in the echo area and the `*Messages*' buffer while BODY is evaluated."
  (declare (indent 0))
  (let ((message-log-max nil))
    `(with-temp-message (or (current-message) "") ,@body)))

(defmacro !foreach (list &rest body)
  "Eval BODY for each elements in LIST. The current element can
be referred with `,it'."
  (declare (indent 1))
  `(progn ,@(mapcar
             (lambda (elem)
	       (macroexpand-all
                (if (cadr body) `(progn ,@body) (car body))
                `((,'\, . (lambda (&rest body) `',(funcall `(lambda (it) ,@body) ',elem))))))
             (eval list))))

(defmacro idle-require (pkg sec)
  `(run-with-idle-timer ,sec nil #'require ,pkg nil t))
